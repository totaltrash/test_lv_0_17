defmodule MyApp.Repo.Migrations.MigrateResources2 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:blog_tag, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
      add :title, :text, null: false
      add :created_date, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_date, :utc_datetime_usec, null: false, default: fragment("now()")
    end

    create unique_index(:blog_tag, [:title], name: "blog_tag_unique_title_index")

    create table(:blog_post_tag, primary_key: false) do
      add :created_date, :utc_datetime_usec, null: false, default: fragment("now()")
      add :post_id, :uuid, null: false, primary_key: true
      add :tag_id, :uuid, null: false, primary_key: true
    end

    create table(:blog_post, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("uuid_generate_v4()"), primary_key: true
    end

    alter table(:blog_post_tag) do
      modify :post_id,
             references(:blog_post, column: :id, name: "blog_post_tag_post_id_fkey", type: :uuid)
    end

    alter table(:blog_post_tag) do
      modify :tag_id,
             references(:blog_tag, column: :id, name: "blog_post_tag_tag_id_fkey", type: :uuid)
    end

    alter table(:blog_post) do
      add :title, :text, null: false
      add :created_date, :utc_datetime_usec, null: false, default: fragment("now()")
      add :updated_date, :utc_datetime_usec, null: false, default: fragment("now()")
    end
  end

  def down do
    alter table(:blog_post) do
      remove :updated_date
      remove :created_date
      remove :title
    end

    drop constraint(:blog_post_tag, "blog_post_tag_tag_id_fkey")

    alter table(:blog_post_tag) do
      modify :tag_id, :uuid
    end

    drop constraint(:blog_post_tag, "blog_post_tag_post_id_fkey")

    alter table(:blog_post_tag) do
      modify :post_id, :uuid
    end

    drop table(:blog_post)

    drop table(:blog_post_tag)

    drop_if_exists unique_index(:blog_tag, [:title], name: "blog_tag_unique_title_index")

    drop table(:blog_tag)
  end
end